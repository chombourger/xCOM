#!/usr/bin/env python
# xCOM - a Simple Component Framework
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

import os;
import string;
import sys;
import optparse;

from codegen import cgeneric;
from codegen import match;
from codegen import parser;

def xc_codegen_main ():

   # Create parser for option arguments
   opt_parser = optparse.OptionParser ('%prog [options] files...');
   opt_parser.add_option ('-I', '--include-path',
                          metavar='INC', action='append',
                          help='Path to XML interface specifications');
   opt_parser.add_option ('-n', '--name',
                          metavar='NAME',
                          help='Base name for the output file(s)');

   # Parse command line
   (opts, args) = opt_parser.parse_args ();

   # Parse supplied XML files
   components = [];
   interfaces = [];
   for path in args:
      fd  = open (path);
      xmlData = fd.read ();
      fd.close ();
      result = parser.parse (path, xmlData);
      components.extend (result.components ());
      interfaces.extend (result.interfaces ());

   # Process component
   for c in components:
      for p in c.ports():
         intf = p.interface ();
         vmaj = p.versionMajor ();
         vmin = p.versionMinor ();
         found = match.interface (interfaces, intf, vmaj, vmin);
         if found is None:
            filename = string.replace (intf, ".", "/") + ".xml";
            if opts.include_path is not None:
               for dir in opts.include_path:
                  path = dir + "/" + filename;
                  try:
                     fd = open (path);
                     xmlData = fd.read ();
                     fd.close ();
                     result = parser.parse (path, xmlData);
                     if result.interfaces() is not None:
                        found = match.interface (result.interfaces(), intf, vmaj, vmin);
                        if found is not None:
                           interfaces.extend (result.interfaces ());
                           break;
                  except:
                     found = None;
         if found is None:
            print '# unknown interface ' + intf + '!';
            sys.exit (1);
         else:
            found.addReference ();

   # Generate code
   if opts.name is not None:
      gen = cgeneric.CodeGenerator (opts.name, components, interfaces, opts);
      gen.write ();
                  
   print '# main()';

if __name__ == "__main__":
    xc_codegen_main ();

